namespace inference {
    [Throws=SemanticError]
    Semantic init_semantic(sequence<u8> model, sequence<u8> tokenizer_data);
    Similarity get_cosine_similarity();
};

[Custom]
typedef sequence<f32> Embedding;

[Trait]
interface Similarity {
    float similarity_score([ByRef] Embedding set1, [ByRef] Embedding set2);
};

dictionary Metadata {
    record<string, string> metadata;
};

interface Document {
    [Name=from]
    constructor(string string_value);
    [Name=from_with_metadata]
    constructor(string string_value, Metadata metadata);
};

[Error]
enum SemanticError {
  "TokenizeEncodeError",
  "TokenizeEncodeByteError",
  "ShapeError",
  "InitSessionBuilder",
  "InitSessionOptimization",
  "InitBuildOrtEnv",
  "InitSessionThreads",
  "InitModelReadError",
  "InitTokenizerReadError"
};

interface Semantic {
    [Throws=SemanticError]
    Embedding embed([ByRef] string sequence);
};
